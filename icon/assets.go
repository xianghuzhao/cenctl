// Code generated by go-bindata. DO NOT EDIT.
// sources:
// start.ico
// stop.ico
package icon

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _startIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\xcf\x6b\x13\x4f\x14\xc0\x5f\xf8\x1e\xbe\x07\x0b\xe6\xe4\xd5\xf4\xa4\x39\x58\xcd\x60\x15\x54\x44\x14\xfc\x03\xa4\x88\x7a\xf0\xe8\x55\xb3\x82\x47\xdb\x9c\xf4\xac\x5e\xfc\x03\x3a\xc6\x4a\x15\x52\x6d\x29\x98\xd9\xc4\x16\xad\x8d\x98\xf8\x9b\x84\x96\x6a\x41\x69\x53\x0b\xa1\xd2\x36\xb5\xdb\x7d\x32\xd9\x59\x8d\xe3\x6e\x76\x76\xb3\x41\x1f\x3c\x16\x36\xfb\xe6\xf3\x32\xf3\xe6\xfd\x00\x88\x40\x04\x62\x31\xfe\x8c\x41\x3a\x0a\xb0\x03\x00\x76\x03\x40\x0c\x00\x8e\x81\xf5\xbe\x21\x51\x80\xe8\x2e\x4b\xfd\x08\x65\x04\x28\x4b\x88\xa7\x8a\x5a\xdf\xb6\x2b\x0e\x6b\x6f\xa3\x8c\xec\xa1\x8c\xf4\x51\x46\x34\xca\x48\x4a\xa8\x26\xde\xf1\xdf\xba\x64\xbb\x10\xb8\xdd\x82\xa1\x53\x46\x96\x28\x23\x06\x65\x04\x25\x35\xc4\x6f\xba\xf8\xb6\x3b\x88\x1f\x92\x4d\x94\x32\x92\xa4\x8c\x94\x1d\x78\x5e\x5a\x11\xb6\x51\x55\x1f\x24\x76\x9c\x32\x92\xa1\x8c\x98\x01\xd8\xb6\x9a\x62\x8d\xb8\x97\x0f\x12\xbb\x97\x32\x52\x6c\x83\x2b\x6b\x51\xac\xe9\xea\x83\xf4\xbf\xc3\x64\x37\xfb\x10\x77\xe2\x4b\xe7\x9d\x71\x5f\x23\x81\x83\xd9\x7d\x8d\x67\x40\x1f\x32\xcd\xf1\xe0\xc0\x4f\xba\x9f\x77\x02\x87\xf2\x47\x70\x6c\xfa\x2c\x0e\xe5\x0f\xe3\x60\x76\x6f\xd0\x78\x48\x36\xf3\xa5\x3b\x56\x71\xb3\xe5\xbc\x67\xef\xfb\x71\x63\x73\x05\xe7\xab\x59\x1c\x7f\x71\xde\x7a\xef\x7f\x2f\x2a\xbf\xdd\xcd\xec\x4f\xbe\xd6\xca\x8e\xf3\x4b\xb3\x37\xd1\x96\xf5\x8d\xaf\xf8\x66\xee\x36\x3e\x98\x3c\x29\xf6\xc2\x97\x1f\x9a\x14\xef\x3c\x67\xe5\x3c\xf9\x33\x37\x50\x96\xe5\x95\x77\x38\xf9\xf6\x0a\xa6\x73\x07\x45\x6c\x28\xf1\x75\x29\x4f\xf6\x88\xdc\xe5\x9b\xcf\xc5\xd8\xaa\xe3\xdc\xc2\x23\x1c\x9d\x3e\xd3\x38\x0f\x85\x33\x59\x12\xb9\xda\xe6\xf7\xb9\xe4\x54\x25\xbe\x2d\xab\xf5\x85\xc6\x37\xc3\x13\xc7\xbd\xe2\xd3\x10\x4c\xa5\xb3\x57\xe5\x5b\x62\x62\xb5\x56\xc4\xfc\xab\x8b\x98\xd6\x0f\xa8\xc6\x40\x2a\x3c\xbe\x38\x13\x63\x1d\x0b\xe5\x6b\xad\x62\x22\xd5\x49\x3e\xbf\xa7\x53\x1f\x52\xaa\xfc\xd0\xf6\xdf\x34\xb7\xf0\xcb\xf2\x53\x7c\xfc\xf2\x02\xde\xd1\xf7\xab\xee\x7f\x28\xf1\xf7\x6d\x6d\x1e\x0b\xe5\xeb\x78\xef\xc9\x51\xbf\xf1\xd7\xd6\xfd\xdb\x34\x56\x71\xe6\xf3\x7d\x7c\x38\x75\x4a\xb5\x3e\xc8\xf7\x2f\x70\xfe\xa9\xd6\x4a\x98\x7f\x7d\x09\xd3\x7a\x6f\xb0\xfc\xf3\x2b\xff\x5e\xf6\xe4\x37\xe5\xdf\xb5\xfa\x22\x96\x66\x6f\xe1\xf0\xc4\x89\x20\xb5\x48\xce\xbf\x8a\xf5\xe7\x2a\xd6\xbf\xd7\xf0\xd3\xe2\x38\x8e\x15\xce\x59\xf5\xb8\xcd\xfa\x23\xd5\x40\xad\x55\xbf\xc5\xeb\xee\xe8\xf3\xd3\x78\x37\x77\xc8\xcf\x5e\x37\xeb\x1f\xf5\xd7\xa1\xff\x18\x71\xb7\xef\x4c\xff\xf1\xb7\xfb\xaf\x7f\xa1\xff\xec\x60\xff\x3d\xa2\xd2\x7f\xbb\xf8\x60\xcf\x1f\xae\xf7\xc2\x23\xce\x35\x3f\xf3\x87\x8b\x0f\x7e\xe7\xaf\x9c\xc8\x25\x81\xe6\x2f\x0f\x3f\xba\x3c\xe6\xcf\x9e\x30\xe6\x4f\x47\x3f\xb2\x7e\xe6\x6f\x75\x2e\x0e\x44\xd0\x04\xe8\xaf\x03\xec\xac\x01\x6c\xff\x08\xf0\x7f\x0e\xe0\x3f\xae\x03\x00\x11\xae\x41\xfd\xb6\xed\xed\xf5\xf8\xda\x9c\xc1\x59\x9c\xc9\xd9\x3f\x02\x00\x00\xff\xff\x97\xb5\x94\x96\xbe\x10\x00\x00")

func startIcoBytes() ([]byte, error) {
	return bindataRead(
		_startIco,
		"start.ico",
	)
}

func startIco() (*asset, error) {
	bytes, err := startIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "start.ico", size: 4286, mode: os.FileMode(438), modTime: time.Unix(1548256035, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _stopIco = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x97\xb1\x4e\x32\x41\x10\xc7\xff\x97\xaf\xf8\x0a\x49\xbc\xca\xd6\xa3\x52\x0a\xe9\xec\x7d\x83\x25\x86\xda\x25\xbe\x01\xe7\x03\x08\xcf\x21\xad\x89\x35\x3c\x00\xd4\xc6\x04\x5b\xaf\x71\xa8\x89\x89\x95\xb1\x20\x9c\x19\xd8\x8b\x64\xd9\xbd\xdb\x3b\x38\xce\x4d\xfe\xb9\xe4\xd8\xd9\xdf\x1c\xbb\x33\x3b\x03\x78\xf0\x10\x04\xfc\x0c\xf0\xe4\x03\x27\x00\xce\x01\x04\x00\xae\xb0\x7e\xbf\x1a\x3e\xe0\x9f\xad\x95\x67\x48\x41\x90\x2d\x5a\x3f\x1d\x74\x23\x66\xab\xe7\xae\xc3\xb0\xf6\x91\x14\x74\x21\x05\xb5\xa5\xa0\x50\x0a\xea\x2b\x85\xea\x1d\xff\x56\xd3\xed\xf6\xc0\xad\x2b\xc6\x58\x0a\x9a\x4b\x41\x0b\x29\x28\xd6\xb4\x50\xbf\x8d\xd5\xdc\x7a\x11\x3f\x34\x1b\x5f\x0a\xea\x4a\x41\x6f\x06\x5e\x96\x22\x65\xeb\xbb\xfa\xa0\xb1\x1b\x52\xd0\x50\x0a\x5a\x16\x60\x27\x5a\xaa\x35\x1a\x59\x3e\xf0\xfb\xce\xef\x9c\x4b\x29\x68\xba\x03\x57\xd7\x54\xad\x69\xf5\x41\xfb\xee\x7d\xb2\x37\x7d\x68\x98\xf8\xda\x7e\x0f\x4b\x60\x27\x1a\x6e\x9e\x07\x03\xbf\x6b\xda\xef\x4e\x8b\xe2\xdb\xeb\x59\x2e\xb1\x8d\xe5\x3c\x74\x37\xf9\x5a\x8c\x45\x26\xf6\xe3\xc3\x47\xfc\xfa\xf2\x15\x4f\x9f\xdd\xc4\x73\xd9\xc6\xe2\x43\x64\x8a\x4d\x15\xb3\x5b\xf3\xf9\x5b\x78\xbd\xbc\x83\x6d\xd8\xd6\xb2\x0f\xa1\xc6\xe6\x9c\x35\xb1\xf1\xf9\x9b\xf2\x0e\xb6\x49\xe1\x8f\xb5\x3c\xd9\x54\xb9\xeb\x50\xfc\xb9\xca\xd5\x09\xbf\x6d\xc9\xa9\x65\xf1\x17\x8a\x99\xba\xf7\x25\xf2\xf5\x33\xd0\xaf\x80\xdf\xff\x43\xfc\xaa\xff\xff\xaa\xcf\x5f\xd5\xf1\x57\x75\xfe\x61\xdd\x55\x98\x7f\xd3\xef\x9f\x41\x81\xfb\x67\xe0\x76\xff\x68\x77\x60\x78\xe8\xfb\xd7\x50\x7f\x8c\x52\x62\x66\x57\x19\xeb\x8f\xaa\xeb\x2f\x43\xed\x5b\x62\xfd\xf9\x9e\x5a\x03\x97\x50\x7f\x8f\x5c\xea\x6f\x8b\x0f\x49\xff\xb1\x15\x17\x0e\x8a\xd4\x79\x76\xee\x3f\x2c\x3e\xe4\xed\xbf\x26\x2a\x97\x14\xea\xbf\x32\xfc\xa8\x65\xf4\x9f\xcd\x7d\xf4\x9f\x0e\x7e\xa4\x2a\x4f\xff\x1d\xf7\xbc\x78\x09\xdc\x7f\x03\xa7\x9f\xc0\x31\x01\xff\x27\xc0\x3f\x56\x0f\xf0\x58\x45\xfd\x4e\xec\x93\xf5\x78\x6d\x66\x30\x8b\x99\xcc\xfe\x09\x00\x00\xff\xff\x87\x64\xcd\xfe\xbe\x10\x00\x00")

func stopIcoBytes() ([]byte, error) {
	return bindataRead(
		_stopIco,
		"stop.ico",
	)
}

func stopIco() (*asset, error) {
	bytes, err := stopIcoBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "stop.ico", size: 4286, mode: os.FileMode(438), modTime: time.Unix(1548256040, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"start.ico": startIco,
	"stop.ico": stopIco,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"start.ico": &bintree{startIco, map[string]*bintree{}},
	"stop.ico": &bintree{stopIco, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

